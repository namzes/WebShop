@page "/cart"
@using Blazored.LocalStorage
@using Webshop.Shared.Models
@using WebShop.Client.Components.Features
@using WebShop.Client.Components.Services
@rendermode InteractiveServer
@inject CartService CartService
@inject WebshopAuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService Lo

<h3>Cart</h3>

<div class="container">
	<div class="cart-product-container">
		@foreach (var p in Products)
		{
			<CartProduct Product="p" OnQuantityChanged="UpdateCart" />
		}
	</div>
	<div class="cart-total">
		<h4>Total: @Products.Sum(p => p.Price * p.Quantity).ToString("C")</h4>
	</div>
	<div class="button-container">
		<button class="checkout-button" @onclick="ClearCart">Clear cart</button>
		<button class="checkout-button" @onclick="CheckoutCart">Go to Checkout</button>
	</div>
</div>

@code {
	public required List<CartProductDisplayDTO> Products = new();

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState?.User;

		if (user == null || !user.Identity?.IsAuthenticated == true)
		{
			NavManager.NavigateTo("/user");
		}
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Products = await CartService.GetCartProductDisplayDtos();
			await InvokeAsync(StateHasChanged);
		}
	}
	private async Task ClearCart()
	{
		await CartService.ClearCart();
		Products = await CartService.GetCartProductDisplayDtos();
		await InvokeAsync(StateHasChanged);
	}
	private void CheckoutCart()
	{
		NavManager.NavigateTo("/checkout");
	}

	private async Task UpdateCart()
	{
		Products = await CartService.GetCartProductDisplayDtos(); // Refresh cart list
		await InvokeAsync(StateHasChanged); // Ensure UI updates
	}




}