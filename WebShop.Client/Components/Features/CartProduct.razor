@using WebShop.Client.Components.Services
@using Webshop.Shared.Models
@inject NavigationManager NavManager
@inject CartService CartService
@rendermode InteractiveServer

<div class="@(Product.Stock > 0 ? "product-list-Product" : "product-list-Product-sold")">
	<img src="@Product.ImageUrl" alt="@Product.Name" class="product-image" @onclick="NavigateToProductPage"/>
	<div class="product-info-container">
		<h3>@Product.Name</h3>
		<CurrencyDisplay Price="@Product.Price"></CurrencyDisplay>
		<div class="quantity-controls">
			<button @onclick="DecreaseQuantity" class="quantity-button">-</button>
			<span>Qty: @Product.Quantity</span>
			<button @onclick="IncreaseQuantity" class="quantity-button" disabled="@IsIncreaseDisabled">+</button>
		</div>
	</div>
</div>

@code {
	[Parameter] public required CartProductDisplayDTO Product { get; set; }
	[Parameter] public EventCallback OnQuantityChanged { get; set; }

	private void NavigateToProductPage()
	{
		NavManager.NavigateTo($"/product/{Product.Id}");
	}
	private bool IsIncreaseDisabled => Product.Quantity >= Product.Stock;


	private async Task IncreaseQuantity()
	{

		await CartService.AddToCart(Product.ToProductDto());
		await OnQuantityChanged.InvokeAsync();
		await CartService.SyncCartToDatabase();
		StateHasChanged();
	}

	private async Task DecreaseQuantity()
	{
		if (Product.Quantity > 1)
		{
			await CartService.RemoveFromCart(Product.ToProductDto());
			await OnQuantityChanged.InvokeAsync();
			await CartService.SyncCartToDatabase();
			StateHasChanged();
		}
		else
		{
			await CartService.RemoveFromCart(Product.ToProductDto());
			await OnQuantityChanged.InvokeAsync();
			await CartService.SyncCartToDatabase();
			StateHasChanged();

		}

	}

}
