@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using WebShop.Client.Components.Services
@inject IHttpClientFactory HttpClientFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject WebshopAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject CartService CartService


<div class="form-container">
	<h3>Login</h3>
	<input class="text-input" type="email" placeholder="Email" @bind="@_email" />
	<input class="text-input" type="password" placeholder="Password" @bind="@_password" />
	<button class="submit-button" @onclick="HandleLogin">Login</button>
</div>

<AuthorizeView>
	<Authorized>Logged in: @context.User.Identity?.Name</Authorized>
	<NotAuthorized>Not logged in</NotAuthorized>
</AuthorizeView>
@code {
	private string _email = string.Empty;
	private string _password = string.Empty;
	private string _message = string.Empty;
	private async Task HandleLogin()
	{

		var responseMessage = await AuthenticationStateProvider.SignInAsync(_email, _password);
		if (responseMessage.IsSuccessStatusCode)
		{
			responseMessage.Headers.TryGetValues("Set-Cookie", out var cookies);
			var authCookie = cookies.FirstOrDefault().Split('='); var cookieKey = authCookie[0]; var cookieValue = authCookie[1];
			HttpContextAccessor.HttpContext.Response.Cookies.Append(cookieKey, cookieValue, new CookieOptions()
			{
				Secure = false, HttpOnly = true, Path = "/",
			});
			CartService.InitializeCart();
			NavigationManager.NavigateTo("/");
		}
		else
		{
			_message = "Login failed";
		}

	}
}
