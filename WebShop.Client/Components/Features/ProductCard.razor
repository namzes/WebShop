@using System.Diagnostics.Eventing.Reader
@using WebShop.Client.Components.Services
@using Webshop.Shared.Models
@inject NavigationManager NavManager
@inject CartService CartService
@inject WebshopAuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<div class="product-wrapper">
	<div class="product-card @GetSaleClass()" @onclick="NavigateToProductPage">
		@if (Product.Sale?.IsOnSale == true)
		{
			<span class="sale-badge">Sale</span>
		}
		<img src="@Product.ImageUrl" alt="name"/>
		<div class="product-info-container">
			<h3>@Product.Name</h3>
			@if (Product.Sale?.IsOnSale == true)
			{
				<p class="old-price">@Product.Price</p>
			}
			<CurrencyDisplay Price="@(Product.Sale?.IsOnSale == true ? Product.Price * Product.Sale.SaleRate : Product.Price)"></CurrencyDisplay>
		</div>
	</div>
	<button class="cart-add-button" @onclick="AddToCart">Add to Cart</button>
</div>


@code
{
	[Parameter] public required ProductDTO Product { get; set; }
	

	private void NavigateToProductPage()
	{
		NavManager.NavigateTo($"/product/{Product.Id}");
	}

	private async Task AddToCart()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user?.Identity?.IsAuthenticated == true)
		{ 
			await CartService.AddToCart(Product);
			
		}
		else
		{
			NavManager.NavigateTo("/user");
		}

		StateHasChanged();
	}
	private string GetSaleClass()
	{
		return Product.Sale?.IsOnSale == true ? "on-sale" : "";
	}
}